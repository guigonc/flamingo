{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","securityKey","setSecurityKey","keyValue","setKeyValue","password","setPassword","decryptedPassword","setDecryptedPassword","Container","textAlign","Fragment","Header","as","Form","Field","onChange","a","target","value","Button","primary","type","onClick","key","result","i","length","charKey","charCodeAt","valueChar","parseInt","decrypt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mQAiDeA,MA9Cf,WAAgB,IAAD,EACyBC,qBADzB,mBACNC,EADM,KACOC,EADP,OAEmBF,qBAFnB,mBAENG,EAFM,KAEIC,EAFJ,OAGmBJ,qBAHnB,mBAGNK,EAHM,KAGIC,EAHJ,OAIqCN,mBAAS,IAJ9C,mBAINO,EAJM,KAIaC,EAJb,KAkBb,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,WAChBT,GACD,kBAAC,IAAMU,SAAP,KACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,MAAX,mCACA,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,KACE,2BAAOC,SAAU,SAACC,GAAD,OAAOb,EAAYa,EAAEC,OAAOC,WAE/C,kBAACC,EAAA,EAAD,CAAQC,SAAO,EAACC,KAAK,SAASC,QAAS,kBAAMrB,EAAeC,KAA5D,YAIJF,GACA,kBAAC,IAAMU,SAAP,KACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,MAAX,mBACA,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,KACE,2BAAOC,SAAU,SAACC,GAAD,OAAOX,EAAYW,EAAEC,OAAOC,WAE/C,kBAACC,EAAA,EAAD,CAAQC,SAAO,EAACC,KAAK,SAASC,QAAS,kBAAMf,EAhCvC,SAACgB,EAAKL,GAGpB,IAFA,IAAIM,EAAS,GAEJC,EAAI,EAAGA,EAAIP,EAAMQ,OAAQD,IAAK,CACrC,IAAME,GAAYJ,EAAIK,WAAWH,EAAEF,EAAIG,QAAQ,IAAI,GAC7CG,EAAYC,SAASZ,EAAMO,IACjCD,GAAmBK,EAAYF,EAAW,GAAGE,EAAaF,EAAUE,EAAYF,EAGlF,OAAOH,EAuBmEO,CAAQ/B,EAAaI,MAAvF,UACA,kBAACO,EAAA,EAAD,CAAQC,GAAG,MAAMN,OC9BT0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e077b845.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Container, Button, Form, Header } from 'semantic-ui-react'\n\nfunction App() {\n  const [securityKey, setSecurityKey] = useState()\n  const [keyValue, setKeyValue] = useState()\n  const [password, setPassword] = useState()\n  const [decryptedPassword, setDecryptedPassword] = useState('')\n\n  const decrypt = (key, value) => {\n    let result = ''\n\n    for (let i = 0; i < value.length; i++) {\n      const charKey = ((key.charCodeAt(i%key.length)-97)%10)\n      const valueChar = parseInt(value[i])\n      result = result + (valueChar < charKey ? (10+valueChar) - charKey : valueChar - charKey)\n    }\n\n    return result  \n  }\n\n  return (\n    <Container textAlign='center'>\n      { !securityKey && \n        <React.Fragment>\n          <Header as='h2'>Escreva a chave de seguran√ßa</Header>\n          <Form>\n            <Form.Field>\n              <input onChange={(a) => setKeyValue(a.target.value)}/>\n            </Form.Field>\n            <Button primary type='submit' onClick={() => setSecurityKey(keyValue)}>Submit</Button>\n          </Form>\n        </React.Fragment>\n      }\n      { securityKey && \n        <React.Fragment>\n          <Header as='h2'>Escreva a senha</Header>\n          <Form>\n            <Form.Field>\n              <input onChange={(a) => setPassword(a.target.value)}/>\n            </Form.Field>\n            <Button primary type='submit' onClick={() => setDecryptedPassword(decrypt(securityKey, password))}>Submit</Button>\n            <Header as='h2'>{decryptedPassword}</Header>\n          </Form>\n        </React.Fragment>}\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}